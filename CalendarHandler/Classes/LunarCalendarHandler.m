//
//  LunarCalendarHandler.m
//  CalendarHandler
//
//  Created by YanYi on 2018/12/24.
//  Copyright Â© 2018 YanYi. All rights reserved.
//

#import "LunarCalendarHandler.h"

unsigned int LunarCalendarTable[199] = {
    0x04AE53,0x0A5748,0x5526BD,0x0D2650,0x0D9544,0x46AAB9,0x056A4D,0x09AD42,0x24AEB6,0x04AE4A,/*1901-1910*/
    0x6A4DBE,0x0A4D52,0x0D2546,0x5D52BA,0x0B544E,0x0D6A43,0x296D37,0x095B4B,0x749BC1,0x049754,/*1911-1920*/
    0x0A4B48,0x5B25BC,0x06A550,0x06D445,0x4ADAB8,0x02B64D,0x095742,0x2497B7,0x04974A,0x664B3E,/*1921-1930*/
    0x0D4A51,0x0EA546,0x56D4BA,0x05AD4E,0x02B644,0x393738,0x092E4B,0x7C96BF,0x0C9553,0x0D4A48,/*1931-1940*/
    0x6DA53B,0x0B554F,0x056A45,0x4AADB9,0x025D4D,0x092D42,0x2C95B6,0x0A954A,0x7B4ABD,0x06CA51,/*1941-1950*/
    0x0B5546,0x555ABB,0x04DA4E,0x0A5B43,0x352BB8,0x052B4C,0x8A953F,0x0E9552,0x06AA48,0x6AD53C,/*1951-1960*/
    0x0AB54F,0x04B645,0x4A5739,0x0A574D,0x052642,0x3E9335,0x0D9549,0x75AABE,0x056A51,0x096D46,/*1961-1970*/
    0x54AEBB,0x04AD4F,0x0A4D43,0x4D26B7,0x0D254B,0x8D52BF,0x0B5452,0x0B6A47,0x696D3C,0x095B50,/*1971-1980*/
    0x049B45,0x4A4BB9,0x0A4B4D,0xAB25C2,0x06A554,0x06D449,0x6ADA3D,0x0AB651,0x093746,0x5497BB,/*1981-1990*/
    0x04974F,0x064B44,0x36A537,0x0EA54A,0x86B2BF,0x05AC53,0x0AB647,0x5936BC,0x092E50,0x0C9645,/*1991-2000*/
    0x4D4AB8,0x0D4A4C,0x0DA541,0x25AAB6,0x056A49,0x7AADBD,0x025D52,0x092D47,0x5C95BA,0x0A954E,/*2001-2010*/
    0x0B4A43,0x4B5537,0x0AD54A,0x955ABF,0x04BA53,0x0A5B48,0x652BBC,0x052B50,0x0A9345,0x474AB9,/*2011-2020*/
    0x06AA4C,0x0AD541,0x24DAB6,0x04B64A,0x69573D,0x0A4E51,0x0D2646,0x5E933A,0x0D534D,0x05AA43,/*2021-2030*/
    0x36B537,0x096D4B,0xB4AEBF,0x04AD53,0x0A4D48,0x6D25BC,0x0D254F,0x0D5244,0x5DAA38,0x0B5A4C,/*2031-2040*/
    0x056D41,0x24ADB6,0x049B4A,0x7A4BBE,0x0A4B51,0x0AA546,0x5B52BA,0x06D24E,0x0ADA42,0x355B37,/*2041-2050*/
    0x09374B,0x8497C1,0x049753,0x064B48,0x66A53C,0x0EA54F,0x06B244,0x4AB638,0x0AAE4C,0x092E42,/*2051-2060*/
    0x3C9735,0x0C9649,0x7D4ABD,0x0D4A51,0x0DA545,0x55AABA,0x056A4E,0x0A6D43,0x452EB7,0x052D4B,/*2061-2070*/
    0x8A95BF,0x0A9553,0x0B4A47,0x6B553B,0x0AD54F,0x055A45,0x4A5D38,0x0A5B4C,0x052B42,0x3A93B6,/*2071-2080*/
    0x069349,0x7729BD,0x06AA51,0x0AD546,0x54DABA,0x04B64E,0x0A5743,0x452738,0x0D264A,0x8E933E,/*2081-2090*/
    0x0D5252,0x0DAA47,0x66B53B,0x056D4F,0x04AE45,0x4A4EB9,0x0A4D4C,0x0D1541,0x2D92B5          /*2091-2099*/
    
};


unsigned int JieQi[] = {
    /*0x85, 0x55, 0x9A, 0x69, 0x99, 0x51,*/ 0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, //1900-1901
    0x94, 0x59, 0x69, 0xA6, 0x65, 0x55, 0x95, 0x55, 0x99, 0xA9, 0x95, 0x55, //1902-1903
    0xC5, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, //1904-1905
    0x94, 0x59, 0x66, 0xA6, 0x65, 0x55, 0x95, 0x55, 0x99, 0xA9, 0x95, 0x55, //1906-1907
    0xC5, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, //1908-1909
    0x94, 0x59, 0x66, 0xA6, 0x65, 0x55, 0x95, 0x55, 0x99, 0xA9, 0x95, 0x55, //1910-1911
    0xC5, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x85, 0x56, 0x66, 0x9A, 0x65, 0x54, //1912-1913
    0x91, 0x56, 0x66, 0xA6, 0x65, 0x55, 0x95, 0x25, 0x69, 0xA6, 0x95, 0x55, //1914-1915
    0x95, 0x55, 0x9A, 0x69, 0x96, 0x45, 0x85, 0x56, 0x5A, 0x9A, 0x59, 0x51, //1916-1917
    0x91, 0x56, 0x66, 0xA6, 0x65, 0x54, 0x95, 0x25, 0x69, 0xA6, 0x95, 0x55, //1918-1919
    0x95, 0x55, 0x9A, 0x69, 0x96, 0x45, 0x85, 0x55, 0x9A, 0x9A, 0x59, 0x51, //1920-1921
    0x91, 0x56, 0x66, 0xA6, 0x65, 0x54, 0x94, 0x59, 0x69, 0xA6, 0x95, 0x55, //1922-1923
    0x95, 0x55, 0x9A, 0x69, 0x96, 0x45, 0x85, 0x55, 0x9A, 0x9A, 0x59, 0x51, //1924-1925
    0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x94, 0x59, 0x69, 0xA6, 0x65, 0x55, //1926-1927
    0x95, 0x55, 0x99, 0xA9, 0x95, 0x55, 0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, //1928-1929
    0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x94, 0x59, 0x69, 0xA6, 0x65, 0x55, //1930-1931
    0x95, 0x55, 0x99, 0xA9, 0x95, 0x55, 0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, //1932-1933
    0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x94, 0x59, 0x66, 0xA6, 0x65, 0x55, //1934-1935
    0x95, 0x55, 0x99, 0xA9, 0x95, 0x55, 0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, //1936-1937
    0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x94, 0x59, 0x66, 0xA6, 0x65, 0x55, //1938-1939
    0x95, 0x55, 0x99, 0xA9, 0x95, 0x55, 0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, //1940-1941
    0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x94, 0x59, 0x66, 0xA6, 0x65, 0x55, //1942-1943
    0x95, 0x55, 0x69, 0xA9, 0x95, 0x55, 0x85, 0x55, 0x9A, 0x69, 0x96, 0x45, //1944-1945
    0x85, 0x56, 0x66, 0x9A, 0x59, 0x54, 0x91, 0x56, 0x66, 0xA6, 0x65, 0x55, //1946-1947
    0x95, 0x25, 0x69, 0xA6, 0x95, 0x55, 0x55, 0x55, 0x9A, 0x69, 0x96, 0x45, //1948-1949
    0x85, 0x55, 0x9A, 0x9A, 0x59, 0x54, 0x91, 0x56, 0x66, 0xA6, 0x65, 0x55, //1950-1951
    0x95, 0x25, 0x69, 0xA6, 0x95, 0x55, 0x55, 0x55, 0x9A, 0x69, 0x96, 0x45, //1952-1953
    0x85, 0x55, 0x9A, 0x9A, 0x59, 0x51, 0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, //1954-1955
    0x95, 0x19, 0x69, 0xA6, 0x95, 0x55, 0x55, 0x55, 0x9A, 0x69, 0x96, 0x45, //1956-1957
    0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, //1958-1959
    0x94, 0x59, 0x69, 0xA6, 0x65, 0x55, 0x55, 0x55, 0x99, 0xA9, 0x95, 0x55, //1960-1961
    0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, //1962-1963
    0x94, 0x59, 0x69, 0xA6, 0x65, 0x55, 0x55, 0x55, 0x99, 0xA9, 0x95, 0x55, //1964-1965
    0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, //1966-1967
    0x94, 0x59, 0x66, 0xA6, 0x65, 0x55, 0x55, 0x55, 0x99, 0xA9, 0x95, 0x55, //1968-1969
    0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, //1970-1971
    0x94, 0x59, 0x66, 0xA6, 0x65, 0x55, 0x55, 0x55, 0x69, 0xA9, 0x95, 0x55, //1972-1973
    0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x91, 0x56, 0x66, 0x9A, 0x59, 0x54, //1974-1975
    0x94, 0x56, 0x66, 0xA6, 0x65, 0x55, 0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, //1976-1977
    0x85, 0x55, 0x9A, 0x69, 0x96, 0x51, 0x85, 0x56, 0x5A, 0x9A, 0x59, 0x54, //1978-1979
    0x94, 0x56, 0x66, 0xA6, 0x65, 0x55, 0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, //1980-1981
    0x85, 0x55, 0x9A, 0x69, 0x96, 0x45, 0x85, 0x55, 0x9A, 0x9A, 0x59, 0x54, //1982-1983
    0x91, 0x56, 0x66, 0x9A, 0x65, 0x55, 0x55, 0x25, 0x69, 0xA6, 0x95, 0x55, //1984-1985
    0x55, 0x55, 0x9A, 0x69, 0x96, 0x45, 0x85, 0x55, 0x9A, 0x6A, 0x59, 0x51, //1986-1987
    0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x55, 0x19, 0x69, 0xA6, 0x65, 0x55, //1988-1989
    0x55, 0x55, 0x99, 0xA9, 0x96, 0x45, 0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, //1990-1991
    0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x54, 0x59, 0x69, 0xA6, 0x65, 0x55, //1992-1993
    0x55, 0x55, 0x99, 0xA9, 0x95, 0x55, 0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, //1994-1995
    0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x54, 0x59, 0x66, 0xA6, 0x65, 0x55, //1996-1997
    0x55, 0x55, 0x99, 0xA9, 0x95, 0x55, 0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, //1998-1999
    0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x54, 0x59, 0x66, 0xA6, 0x65, 0x55, //2000-2001
    0x55, 0x55, 0x99, 0xA9, 0x95, 0x55, 0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, //2002-2003
    0x91, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x54, 0x59, 0x66, 0xA6, 0x65, 0x55, //2004-2005
    0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, 0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, //2006-2007
    0x91, 0x56, 0x66, 0x9A, 0x59, 0x54, 0x54, 0x56, 0x66, 0xA6, 0x65, 0x55, //2008-2009
    0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, 0x85, 0x55, 0x9A, 0x69, 0x96, 0x51, //2010-2011
    0x91, 0x56, 0x5A, 0x9A, 0x59, 0x54, 0x54, 0x56, 0x66, 0x9A, 0x65, 0x55, //2012-2013
    0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, 0x85, 0x55, 0x9A, 0x69, 0x96, 0x45, //2014-2015
    0x85, 0x55, 0x9A, 0x9A, 0x59, 0x54, 0x51, 0x56, 0x66, 0x9A, 0x65, 0x55, //2016-2017
    0x55, 0x25, 0x69, 0xA6, 0x95, 0x55, 0x55, 0x55, 0x99, 0xA9, 0x96, 0x45, //2018-2019
    0x85, 0x55, 0x9A, 0x69, 0x99, 0x54, 0x51, 0x56, 0x66, 0x9A, 0x65, 0x54, //2020-2021
    0x55, 0x19, 0x69, 0xA6, 0x65, 0x55, 0x55, 0x55, 0x99, 0xA9, 0x96, 0x45, //2022-2023
    0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x51, 0x56, 0x66, 0x9A, 0x65, 0x54, //2024-2025
    0x54, 0x59, 0x66, 0xA6, 0x65, 0x55, 0x55, 0x55, 0x99, 0xA9, 0x95, 0x55, //2026-2027
    0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x51, 0x56, 0x66, 0x9A, 0x65, 0x54, //2028-2029
    0x54, 0x59, 0x66, 0xA6, 0x65, 0x55, 0x55, 0x55, 0x99, 0xA9, 0x95, 0x55, //2030-2031
    0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x51, 0x56, 0x66, 0x9A, 0x65, 0x54, //2032-2033
    0x54, 0x59, 0x66, 0xA6, 0x65, 0x55, 0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, //2034-2035
    0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x51, 0x56, 0x66, 0x9A, 0x65, 0x54, //2036-2037
    0x54, 0x59, 0x66, 0xA6, 0x65, 0x55, 0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, //2038-2039
    0x85, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x51, 0x56, 0x5A, 0x9A, 0x59, 0x54, //2040-2041
    0x54, 0x56, 0x66, 0xA6, 0x65, 0x55, 0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, //2042-2043
    0x85, 0x55, 0x9A, 0x69, 0x96, 0x51, 0x51, 0x55, 0x9A, 0x9A, 0x59, 0x54, //2044-2045
    0x54, 0x56, 0x66, 0x9A, 0x65, 0x55, 0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, //2046-2047
    0x85, 0x55, 0x99, 0xA9, 0x96, 0x45, 0x45, 0x55, 0x9A, 0x69, 0x99, 0x54, //2048-2049
    0x51, 0x56, 0x66, 0x9A, 0x65, 0x55, 0x55, 0x19, 0x69, 0xA6, 0x65, 0x55, //2050-2051
    0x55, 0x55, 0x99, 0xA9, 0x96, 0x45, 0x45, 0x55, 0x9A, 0x69, 0x99, 0x54, //2052-2053
    0x51, 0x56, 0x66, 0x9A, 0x65, 0x55, 0x55, 0x19, 0x66, 0xA6, 0x65, 0x55, //2054-2055
    0x55, 0x55, 0x99, 0xA9, 0x96, 0x45, 0x45, 0x55, 0x9A, 0x69, 0x99, 0x51, //2056-2057
    0x51, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x55, 0x19, 0x66, 0xA6, 0x65, 0x55, //2058-2059
    0x55, 0x55, 0x99, 0xA9, 0x95, 0x55, 0x45, 0x55, 0x9A, 0x69, 0x99, 0x51, //2060-2061
    0x51, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x54, 0x59, 0x66, 0xA6, 0x65, 0x55, //2062-2063
    0x55, 0x55, 0x99, 0xA9, 0x95, 0x55, 0x45, 0x55, 0x9A, 0x69, 0x99, 0x51, //2064-2065
    0x51, 0x56, 0x66, 0x9A, 0x65, 0x54, 0x54, 0x59, 0x66, 0xA6, 0x65, 0x55, //2066-2067
    0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, 0x45, 0x55, 0x9A, 0x69, 0x99, 0x51, //2068-2069
    0x51, 0x56, 0x5A, 0x9A, 0x59, 0x54, 0x54, 0x59, 0x66, 0xA6, 0x65, 0x55, //2070-2071
    0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, 0x45, 0x55, 0x9A, 0x69, 0x96, 0x51, //2072-2073
    0x51, 0x56, 0x5A, 0x9A, 0x59, 0x54, 0x54, 0x56, 0x66, 0x9A, 0x65, 0x55, //2074-2075
    0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, 0x45, 0x55, 0x9A, 0x69, 0x96, 0x51, //2076-2077
    0x51, 0x55, 0x9A, 0x6A, 0x59, 0x54, 0x54, 0x56, 0x66, 0x9A, 0x65, 0x55, //2078-2079
    0x55, 0x55, 0x69, 0xA6, 0x95, 0x55, 0x45, 0x55, 0x99, 0xA9, 0x96, 0x45, //2080-2081
    0x51, 0x55, 0x9A, 0x69, 0x99, 0x54, 0x51, 0x56, 0x66, 0x9A, 0x65, 0x55, //2082-2083
    0x55, 0x19, 0x69, 0xA6, 0x65, 0x55, 0x15, 0x55, 0x99, 0xA9, 0x96, 0x45, //2084-2085
    0x45, 0x55, 0x9A, 0x69, 0x99, 0x54, 0x51, 0x56, 0x66, 0x9A, 0x65, 0x55, //2086-2087
    0x55, 0x19, 0x66, 0xA6, 0x65, 0x55, 0x15, 0x55, 0x99, 0xA9, 0x96, 0x45, //2088-2089
    0x45, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x51, 0x56, 0x66, 0x9A, 0x65, 0x54, //2090-2091
    0x55, 0x19, 0x66, 0xA6, 0x65, 0x55, 0x15, 0x55, 0x99, 0xA9, 0x95, 0x55, //2092-2093
    0x45, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x51, 0x56, 0x66, 0x9A, 0x65, 0x54, //2094-2095
    0x54, 0x59, 0x66, 0xA6, 0x65, 0x55, 0x15, 0x55, 0x99, 0xA6, 0x95, 0x55, //2096-2097
    0x45, 0x55, 0x9A, 0x69, 0x99, 0x51, 0x51, 0x56, 0x66, 0x9A, 0x65, 0x54  //2098-2099
    
};

// æ°ä¹ å¥æ¢ åºæ¢ ä¸ä¼

unsigned int Sanjiu_Volts[] = {
    /*0x6261,*/ 0x3C2A, 0x62E1, 0x3CAA, 0x6361, 0x34E8, 0x5B9F, 0x8268, 0x5C1F, 0x7AA6, //1900-1909
    0x545D, 0x7B27, 0x54DD, 0x7365, 0x4A1B, 0x73E5, 0x4A9B, 0x6C23, 0x42D9, 0x6CA3, //1910-1919
    0x436C, 0x64E1, 0x3BAA, 0x6261, 0x3C2A, 0x5A9F, 0x3468, 0x5B1F, 0x84E8, 0x535D, //1920-1929
    0x7A26, 0x53DD, 0x7AA7, 0x4C1B, 0x72E5, 0x4C9B, 0x7365, 0x41D9, 0x6BA3, 0x4259, //1930-1939
    0x6C23, 0x3AAA, 0x6461, 0x3B2A, 0x64E1, 0x3368, 0x5A1F, 0x33E8, 0x5A9F, 0x7C26, //1940-1949
    0x52DD, 0x7CA6, 0x535D, 0x71E5, 0x4B9B, 0x7265, 0x4C1B, 0x6AA3, 0x4459, 0x6B23, //1950-1959
    0x44D9, 0x6361, 0x3A2A, 0x63E1, 0x3AAA, 0x5C1F, 0x32E8, 0x5C9F, 0x3368, 0x51DD, //1960-1969
    0x7BA6, 0x525D, 0x7C26, 0x4A9B, 0x7465, 0x4B1B, 0x74E5, 0x4359, 0x6A23, 0x43D9, //1970-1979
    0x6AA3, 0x3C17, 0x62E1, 0x3CAA, 0x6361, 0x31E8, 0x5B9F, 0x3268, 0x5C1F, 0x7AA6, //1980-1989
    0x545D, 0x7B26, 0x54DD, 0x7364, 0x4A1B, 0x73E5, 0x4A9B, 0x6C23, 0x42D9, 0x6CA3, //1990-1999
    0x4359, 0x61E1, 0x3B97, 0x6261, 0x3C2A, 0x5A9F, 0x3468, 0x5B1F, 0x34E8, 0x535D, //2000-2009
    0x7A26, 0x53DD, 0x7AA6, 0x4C1B, 0x72E4, 0x4C9B, 0x7365, 0x41D9, 0x6BA3, 0x4259, //2010-2019
    0x6C23, 0x3A97, 0x6461, 0x3B17, 0x61E1, 0x3368, 0x5A1F, 0x33E8, 0x5A9F, 0x2C26, //2020-2029
    0x52DD, 0x7CA6, 0x535D, 0x71E4, 0x4B9B, 0x7264, 0x4C1B, 0x6AA3, 0x4459, 0x6B23, //2030-2039
    0x41D9, 0x6361, 0x3A17, 0x63E1, 0x3AAA, 0x5C1F, 0x32E8, 0x5C9F, 0x3368, 0x51DD, //2040-2049
    0x2BA6, 0x525D, 0x7C26, 0x4A9B, 0x7464, 0x4B1B, 0x71E5, 0x4359, 0x6A23, 0x43D9, //2050-2059
    0x6AA3, 0x3C17, 0x62E1, 0x3C97, 0x6361, 0x31E8, 0x5B9F, 0x3268, 0x5C1F, 0x2AA6, //2060-2069
    0x545D, 0x2B26, 0x51DD, 0x7364, 0x4A1B, 0x73E4, 0x4A9B, 0x6C23, 0x42D9, 0x6CA3, //2070-2079
    0x4359, 0x61E1, 0x3B97, 0x6261, 0x3C17, 0x5A9F, 0x3468, 0x5B1F, 0x31E8, 0x535D, //2080-2089
    0x2A26, 0x53DD, 0x2AA6, 0x4C1B, 0x72E4, 0x4C9B, 0x7364, 0x41D9, 0x6BA3, 0x4259  //2090-2099
    
};

// é³åå¹³å¹´æä»½å¤©æ°
int solarNonleapYearMonth[13]   = {0,31,28,31,30,31,30,31,31,30,31,30,31};

char *Tiangan[10]   = {"ç²","ä¹","ä¸","ä¸","æ","å·±","åº","è¾","ç","ç¸"};
char *Dizhi[12]     = {"å­","ä¸","å¯","å¯","è¾°","å·²","å","æª","ç³","è¥¿","æ","äº¥"};
char *Shengxiao[12] = {"é¼ ","ç","è","å","é¾","è","é©¬","ç¾","ç´","é¸¡","ç","çª"};
char *Jieqi[24]     = {"å¬è³","å°å¯","å¤§å¯","ç«æ¥","é¨æ°´","æè°","æ¥å","æ¸æ","è°·é¨","ç«å¤","å°æ»¡","èç§","å¤è³","å°æ","å¤§æ","ç«ç§","å¤æ","ç½é²","ç§å","å¯é²","éé","ç«å¬","å°éª","å¤§éª"};

char *Xingqi[7] = {"æææ¥","ææä¸","ææäº","ææä¸","ææå","ææäº","ææå­"};
char *Shujiu[9] = {"ä¸ä¹","äºä¹","ä¸ä¹","åä¹","äºä¹","å­ä¹","ä¸ä¹","å«ä¹","ä¹ä¹"};
char *Meiyu[2]  = {"å¥æ¢","åºæ¢"};
char *Sanfu[3]  = {"åä¼","ä¸­ä¼","æ«ä¼"};


@interface LunarCalendarHandler () {
    NSInteger _solarYear;
    NSInteger _solarMonth;
    NSInteger _solarDay;
    BOOL      _leapYear;
    
    NSInteger _yearData;
    NSInteger _leapMonth;
    NSInteger _totalMonth;
    NSInteger _lunarMonth;
    
    NSInteger _solarDayFlag;
}



@end


@implementation LunarCalendarHandler

- (NSArray<LunarDateModel *> *)getLunarCalendarDataAtYear:(NSInteger)year {
    if (year <= 1900) {
        NSLog(@"æ±æ­,æä¸æä¾1990å¹´åä¹åçååæ°æ®ï¼");
        return nil;
    } else if (year >= 2100) {
        NSLog(@"æ±æ­,æä¸æä¾2100å¹´åä¹åçååæ°æ®ï¼");
        return nil;
    } else {
        return [self getLunarCalendarDataAtYearData:year];
    }
}


/**
 è·åå½å¹´ååæ°æ®
 
 @param year å¹´ä»½ yyyy
 @return ååæ°æ®
 */
- (NSArray <LunarDateModel *>*)getLunarCalendarDataAtYearData:(NSInteger)year {
    _yearData = LunarCalendarTable[year - 1901];
    NSMutableArray <LunarDateModel *>* lunarCalendarData = [NSMutableArray new];
    _leapMonth = [self getLunarCalendarLeapMonthWithYearData:_yearData];
    _totalMonth = _leapMonth == 0 ? 12 : 13;
    _lunarMonth = 1;
    _solarYear  = year;
    _solarMonth = [self getLunarCalendarTheChineseNewYearMonthWithYearData:_yearData];
    _solarDay   = [self getLunarCalendarTheChineseNewYearDayWithYearData:_yearData];
    _leapYear   = [self solarYearIsLeapYear:year];
    
    for (NSInteger index = 1; index <= _totalMonth; index ++) {
        NSInteger lunarMonthDays = [self getLunarCalendarNomalMonthDaysWithYearData:_yearData month:index];
        if (index == _leapMonth) {
            for (NSInteger lunarDay = 1; lunarDay <= lunarMonthDays ; lunarDay ++ ) {
                LunarDateModel * lunarDate = [LunarDateModel new];
                lunarDate.solarDate = [self getSolarDate];
                lunarDate.lunarDate = [self getLunarDay:lunarDay month:_lunarMonth year:year isLeapMonth:NO];
                [lunarCalendarData addObject:lunarDate];
            }
        } else if ((index == _leapMonth + 1) && (_leapMonth > 0)) {
            for (NSInteger lunarDay = 1; lunarDay <= lunarMonthDays ; lunarDay ++ ) {
                LunarDateModel * lunarDate = [LunarDateModel new];
                lunarDate.solarDate = [self getSolarDate];
                lunarDate.lunarDate = [self getLunarDay:lunarDay month:_lunarMonth year:year isLeapMonth:YES];
                [lunarCalendarData addObject:lunarDate];
            }
            _lunarMonth ++;
        } else {
            for (NSInteger lunarDay = 1; lunarDay <= lunarMonthDays ; lunarDay ++ ) {
                LunarDateModel * lunarDate = [LunarDateModel new];
                lunarDate.solarDate = [self getSolarDate];
                lunarDate.lunarDate = [self getLunarDay:lunarDay month:_lunarMonth year:year isLeapMonth:NO];
                [lunarCalendarData addObject:lunarDate];
            }
            _lunarMonth ++;
        }
    }
    return lunarCalendarData;
}


- (Solar *)getSolarDate {
    Solar *solar = [Solar new];
    solar.day   = _solarDay;
    solar.year  = _solarYear;
    solar.month = _solarMonth;
    if (_solarMonth == 2 && _leapYear) { // äºæä»½ç¹æ®å¤ç
        if (_solarDay == 29) { // å¤æ­æ¯å¦è·¨æä»½
            _solarDay = 1;
            _solarMonth ++;
        } else {
            _solarDay ++;
        }
    } else {
        if (_solarDay == solarNonleapYearMonth[_solarMonth]) {    // å¤æ­æ¯å¦è·¨æä»½
            _solarDay = 1;
            if (_solarMonth == 12) { // å¤æ­æ¯å¦è·¨å¹´
                _solarMonth = 1;
                _solarYear ++;
            } else {
                _solarMonth ++;
            }
        } else {
            _solarDay ++;
        }
    }
    _solarDayFlag ++;
    return solar;
}


/**
 å¤æ­è¯¥å¬åå¹´æ¯å¦ä¸ºé°å¹´

 @param solarYear å¬åå¹´ä»½
 @return æ¯å¦é°å¹´
 */
- (BOOL)solarYearIsLeapYear:(NSInteger)solarYear {
    if (solarYear % 4) {            // ä¸è½è¢«4æ´é¤,æ¯å¹³å¹´
        return NO;
    } else if (solarYear % 100) {   // ä¸è½è¢«100 æ´é¤,æ¯æ¶¦å¹´
        return YES;
    } else if (solarYear % 400) {   // ä¸è½è¢«400 æ´é¤,æ¯å¹³å¹´
        return NO;
    } else {                        // è½è¢«400 æ´é¤,æ¯é°å¹´
        return YES;
    }
}

/**
 çæååæ°æ®æ¨¡å

 @param day ååæ¥
 @param month ååæä»½
 @param year ååå¹´ä»½
 @param isLeapMonth æ¯å¦é°æ
 @return ååæ°æ®æ¨¡å
 */
- (Lunar *)getLunarDay:(NSInteger)day month:(NSInteger)month year:(NSInteger)year isLeapMonth:(BOOL)isLeapMonth {
    Lunar *dayModel = [Lunar new];
    dayModel.day    = day;
    dayModel.month  = month;
    dayModel.year   = year;
    dayModel.isLeap = isLeapMonth;
    return dayModel;
}

// è·åæ¥èæå¨å¬åæä»½çæ¥æ
- (NSInteger)getLunarCalendarTheChineseNewYearDayWithYearData:(NSInteger)yearData {
    return yearData & 0x1F;
}

// è·åæ¥èæå¨å¬åå¹´ä»½çæä»½
- (NSInteger)getLunarCalendarTheChineseNewYearMonthWithYearData:(NSInteger)yearData {
    return ((yearData & 0x30)>>4) + 1;
}

// è·åååé°ææä»½ // å¦æ  åè¿å0
- (NSInteger)getLunarCalendarLeapMonthWithYearData:(NSInteger)yearData {
    return (yearData & 0xF00000) >> 20;
}

// è·åååé°æå¤©æ°
- (NSInteger)getLunarCalendarLeapMonthDaysWithYearData:(NSInteger)yearData {
    NSInteger leapMonth = [self getLunarCalendarLeapMonthWithYearData:yearData];
    if (yearData >> (20 - leapMonth)) {
        return 30;
    } else {
        return 29;
    }
}
// è·åååå½æå¤©æ°
- (NSInteger)getLunarCalendarNomalMonthDaysWithYearData:(NSInteger)yearData month:(NSInteger)month {
    if ((yearData >> (20 - month)) & 0x1) {
        return 30;
    } else {
        return 29;
    }
}


@end
